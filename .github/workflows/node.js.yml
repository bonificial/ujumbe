name: Node.js CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: 16
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Set the environment variable here

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: $HOME/.kube/config

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2 # Change to your desired AWS region

      - name: Authenticate with AWS ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j9c2n9s8
        env:
          your-region: us-east-2 # Change to your AWS region
          your-account-id: 732196143768 # Change to your AWS account ID

      - name: Build and push Docker image
        run: |
          # Replace these with your Docker image details
          docker build -t ujumbe:latest .
          docker tag ujumbe:latest public.ecr.aws/j9c2n9s8/ujumbe:latest
          docker push public.ecr.aws/j9c2n9s8/ujumbe:latest
        env:
          DOCKER_CLI_AK: ${{ secrets.AWS_ACCESS_KEY_ID }}
          DOCKER_CLI_SK: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2 # Change to your desired AWS region

      - name: Generate ConfigMap
        run: |
          echo "apiVersion: v1" > configmap.yaml
          echo "kind: ConfigMap" >> configmap.yaml
          echo "metadata:" >> configmap.yaml
          echo "  name: ujumbe-config" >> configmap.yaml
          echo "data:" >> configmap.yaml

          # Loop through all GitHub secrets and add them to the ConfigMap
          for secret in $(printenv | grep -E '^SECRET_' | sed 's/SECRET_//'); do
            echo "  $secret: ${{ secrets["SECRET_$secret"] }}" >> configmap.yaml
          done
          # Add more environment variables as needed
        shell: bash

      - name: Deploy to EKS
        run: |
          # Install and configure kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          # Authenticate with EKS cluster
          aws eks --region us-east-2 update-kubeconfig --name ujumbe-app

          # Apply Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f configmap.yaml
        env:
          KUBECONFIG: $HOME/.kube/config
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Set the environment variable here

      - name: Display Pod Logs
        run: |
          # show the logs
          kubectl wait --for=condition=available deployment/ujumbe --timeout=360s
          POD_NAME=$(kubectl get pods -l app=ujumbe -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD_NAME
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Set the environment variable here

      - name: Test EKS Deployment
        run: |
          # Wait for the service to be available (you may need to adjust the timeout)
          kubectl get svc ujumbe
          # Get the LoadBalancer or Service IP (if it's a LoadBalancer type)
          # SERVICE_IP=$(kubectl get svc ujumbe -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          CLUSTER_IP=$(kubectl get svc ujumbe -o jsonpath='{.spec.clusterIP}')
          # Alternatively, get the NodePort (if it's a NodePort type)
          NODE_PORT=$(kubectl get svc ujumbe -o jsonpath='{.spec.ports[0].nodePort}')

          # Make a cURL request to test the server
          # If it's a LoadBalancer type, use the SERVICE_IP
          # If it's a NodePort type, use the NodePort (uncomment NODE_PORT)
          # curl -I http://$SERVICE_IP:$NODE_PORT # If LoadBalancer type
          curl -I http://$CLUSTER_IP:$NODE_PORT --connect-timeout 20 # If NodePort type

          # Check the response for HTTP status codes
        env:
          KUBECONFIG: $HOME/.kube/config
