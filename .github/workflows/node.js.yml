name: Node.js CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
jobs:
  Build_and_Run_Tests:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 16
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}
      MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
      TEST_BUSINESS_NAME: ${{ secrets.TEST_BUSINESS_NAME }}
      TEST_FROM_EMAIL: ${{ secrets.TEST_FROM_EMAIL }}
      TEST_TO_EMAIL: ${{ secrets.TEST_TO_EMAIL }}
      DOCKER_CLI_AK: ${{ secrets.AWS_ACCESS_KEY_ID }}
      DOCKER_CLI_SK: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REGION: ${{ secrets.ECR_REGION }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Run tests
        # Running Unit Tests
        run: npm test

  Containerize_Deploy_Run:
    runs-on: ubuntu-latest
    needs: Build_and_Run_Tests
    env:
      KUBECONFIG: $HOME/.kube/config
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_REGION }}

      - name: Authenticate with AWS ECR
        run: |
          aws ecr-public get-login-password --region ${{ secrets.ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_ENDPOINT }}
        env:
          your-region: ${{ secrets.ECR_REGION }}
          your-account-id: ${{ env.AWS_ACCOUNT_ID }}

      - name: Build and push Docker image
        run: |
          # Replace these with your Docker image details
          docker build -t ujumbe:latest .
          docker tag ujumbe:latest ${{ secrets.ECR_ENDPOINT }}/ujumbe:latest
          docker push ${{ secrets.ECR_ENDPOINT }}/ujumbe:latest
        env:
          DOCKER_CLI_AK: ${{ env.AWS_ACCESS_KEY_ID }}
          DOCKER_CLI_SK: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Generate ConfigMap
        run: |
          echo "apiVersion: v1" > configmap.yaml
          echo "kind: ConfigMap" >> configmap.yaml
          echo "metadata:" >> configmap.yaml
          echo "  name: ujumbe-config" >> configmap.yaml
          echo "data:" >> configmap.yaml
          echo "  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}" >> configmap.yaml
          echo "  MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}" >> configmap.yaml
          echo "  MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}" >> configmap.yaml
          echo "  TEST_BUSINESS_NAME: ${{ secrets.TEST_BUSINESS_NAME }}" >> configmap.yaml
          echo "  TEST_FROM_EMAIL: ${{ secrets.TEST_FROM_EMAIL }}" >> configmap.yaml
          echo "  TEST_TO_EMAIL: ${{ secrets.TEST_TO_EMAIL }}" >> configmap.yaml
          # Add more environment variables as needed

      - name: Deploy to EKS
        run: |
          # Install and configure kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          # Authenticate with EKS cluster
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ujumbe-app
          kubectl rollout restart deployment/ujumbe
          # Apply Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f configmap.yaml

        env:
          KUBECONFIG: $HOME/.kube/config

      - name: Display Pod Logs
        run: |
          # show the logs
          kubectl wait --for=condition=available deployment/ujumbe --timeout=360s
          POD_NAME=$(kubectl get pods -l app=ujumbe -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD_NAME
