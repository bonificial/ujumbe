name: Node.js CI

env:
  SLACK_WEBHOOK: ${{secrets.API_KEY}}

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 16

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      - name: Build
        run: npm run build --if-present


      - name: Run tests
        run: npm test

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIA2U6SKQKMMCCAHDWF # ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: JBA6YCFGsVW3zBo4buUCRlg8W8vb2tT7cJxmbMYH # ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2 # Change to your desired AWS region

      - name: Authenticate with AWS ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j9c2n9s8
        env:
          your-region: us-east-2 # Change to your AWS region
          your-account-id: 732196143768 # Change to your AWS account ID

      - name: Build and push Docker image
        run: |
          # Replace these with your Docker image details
          docker build -t ujumbe:latest .
          docker tag ujumbe:latest public.ecr.aws/j9c2n9s8/ujumbe:latest
          docker push public.ecr.aws/j9c2n9s8/ujumbe:latest
        env:
          DOCKER_CLI_AK: AKIA2U6SKQKMMCCAHDWF # ${{ secrets.AWS_ACCESS_KEY_ID }}
          DOCKER_CLI_SK: JBA6YCFGsVW3zBo4buUCRlg8W8vb2tT7cJxmbMYH # ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2 # Change to your desired AWS region

      - name: Deploy to EKS
        run: |
          # Install and configure kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Authenticate with EKS cluster
          aws eks --region us-east-2 update-kubeconfig --name ujumbe-app
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        env:
          KUBECONFIG: $HOME/.kube/config

      - name: Test EKS Deployment
        run: |
          # Wait for the service to be available (you may need to adjust the timeout)
          kubectl get svc ujumbe
          kubectl wait --for=condition=available deployment/ujumbe --timeout=180s

          # Get the LoadBalancer or Service IP (if it's a LoadBalancer type)
          # SERVICE_IP=$(kubectl get svc ujumbe -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
           CLUSTER_IP=$(kubectl get svc ujumbe -o jsonpath='{.spec.clusterIP}')
          # Alternatively, get the NodePort (if it's a NodePort type)
          # NODE_PORT=$(kubectl get svc ujumbe -o jsonpath='{.spec.ports[0].nodePort}')

          # Make a cURL request to test the server
          # If it's a LoadBalancer type, use the SERVICE_IP
          # If it's a NodePort type, use the NodePort (uncomment NODE_PORT)
           # curl -I http://$SERVICE_IP:$NODE_PORT # If LoadBalancer type
           curl -I http://$CLUSTER_IP:$NODE_PORT # If NodePort type

          # Check the response for HTTP status codes
        env:
          KUBECONFIG: $HOME/.kube/config
